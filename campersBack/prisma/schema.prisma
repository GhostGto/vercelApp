generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id           String        @id @default(uuid())
  name         String?
  email        String        @unique
  password     String
  owner        Boolean       @default(false)
  campings     Camping[]
  reservations Reservation[]
  reviews      Review[]
  favourites   Favourites[]
}

model Reservation {
  id          Int               @id @default(autoincrement())
  camping     Camping           @relation(fields: [campingId], references: [id])
  campingId   Int
  startDate   DateTime
  endDate     DateTime
  peopleCount Int
  tentsCount  Int
  status      ReservationStatus
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  cancelledAt DateTime?

  depositAmount Payment? @relation("ReservationDeposit")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([campingId])
  @@index([startDate, endDate])
  @@index([status])
}

model Payment {
  id Int @id @default(autoincrement())

  amount            Float
  statusDetail      String?
  payerEmail        String?
  externalPaymentId String
  limitDateRefound  DateTime @db.Date

  reservation   Reservation @relation("ReservationDeposit", fields: [reservationId], references: [id])
  reservationId Int         @unique
}

model Review {
  id         Int      @id @default(autoincrement())
  camping    Camping  @relation(fields: [campingId], references: [id])
  campingId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  name       String
  comment    String
  rating     Float
  profilePic String?
  date       DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([campingId])
  @@index([userId])
}

model Favourites {
  id        Int     @id @default(autoincrement())
  camping   Camping @relation(fields: [campingId], references: [id])
  campingId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, campingId])
  @@index([campingId])
  @@index([userId])
}

model Camping {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String
  contactPhone      String
  location          Location           @relation(fields: [locationId], references: [id])
  locationId        Int
  pricing           Pricing[]
  amenities         Amenity[]
  media             Media[]
  nearbyAttractions NearbyAttraction[]
  limitCamping      LimitCamping       @relation(fields: [limitCampingId], references: [id])
  limitCampingId    Int                @unique

  reservations Reservation[]
  reviews      Review[]
  favourites   Favourites[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([name])
  @@index([locationId])
  @@index([userId])
}

model Location {
  id             Int       @id @default(autoincrement())
  campingAddress String
  mapLink        String
  campings       Camping[]
}

model Pricing {
  id            Int     @id @default(autoincrement())
  tarifa        String
  pricePerNight Float
  camping       Camping @relation(fields: [campingId], references: [id])
  campingId     Int

  @@index([campingId])
}

model Amenity {
  id        Int       @id @default(autoincrement())
  name      String
  available Boolean   @default(true)
  campings  Camping[]
}

model NearbyAttraction {
  id        Int     @id @default(autoincrement())
  name      String
  camping   Camping @relation(fields: [campingId], references: [id])
  campingId Int

  @@index([campingId])
}

model LimitCamping {
  id       Int      @id @default(autoincrement())
  maxUsers Int
  maxTents Int
  camping  Camping?
}

model Media {
  id        Int     @id @default(autoincrement())
  url       String
  type      String // "image" o "video"
  camping   Camping @relation(fields: [campingId], references: [id])
  campingId Int

  @@index([campingId])
}
